//=============================================================================
// 
//  プレイヤー処理 [player.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "player.h"
#include "game.h"
#include "camera.h"
#include "manager.h"
#include "debugproc.h"
#include "renderer.h"
#include "input.h"
#include "enemy.h"
#include "calculation.h"
#include "score.h"
#include "texture.h"
#include "Xload.h"
#include "model.h"
#include "hp_gauge.h"
#include "elevation.h"
#include "shadow.h"
#include "particle.h"
#include "3D_Effect.h"
#include "ballast.h"
#include "impactwave.h"
#include "sound.h"
#include "enemymanager.h"
#include "bullet.h"
#include "stage.h"
#include "objectX.h"
#include "instantfade.h"
#include "fade.h"
#include "listmanager.h"
#include "object_circlegauge2D.h"
#include "collisionobject.h"
#include "limitarea.h"
#include "beam.h"
#include "santabag.h"
#include "meshsphere.h"
#include "particle.h"
#include "MyEffekseer.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const char* CHARAFILE = "data\\TEXT\\character\\player\\tyuuniplayer\\setup_player.txt";	// キャラクターファイル
	const float JUMP = 20.0f * 1.5f;	// ジャンプ力初期値
	const int INVINCIBLE_INT = 2;		// 無敵の間隔
	const int INVINCIBLE_TIME = 90;		// 無敵の時間
	const int DEADTIME = 120;			// 死亡時の時間
	const int FADEOUTTIME = 60;			// フェードアウトの時間
	const int MAX_ATKCOMBO = 2;			// 攻撃コンボの最大数
	const int INTERVAL_ATK = 15;		// 攻撃の猶予
	const int MAX_BUFFSTATUS = 100;		// ステータスのバフ最大値
	const float MAX_BALL_SIZE = 40.0f;	// 雪玉の最大サイズ
	const float SPEED_GRAW_BALL = 1.1f;	// 雪玉の成長速度
	const float LINE_ICE = 30.0f;	// 氷球になるライン
	const float RADIUS_STAGE = 5000.0f;	// ステージの半径
}

//==========================================================================
// コンストラクタ
//==========================================================================
CPlayer::CPlayer(int nPriority) : CObjectChara(nPriority)
{
	// 値のクリア
	// 共有変数
	m_bJump = false;					// ジャンプ中かどうか
	m_bLandOld = false;					// 過去の着地情報
	m_bHitStage = false;				// ステージの当たり判定
	m_bLandField = false;				// フィールドの着地判定
	m_bHitWall = false;					// 壁の当たり判定
	m_nCntWalk = 0;						// 歩行カウンター
	m_state = STATE_NONE;				// 状態
	m_sMotionFrag.bATK = false;		// モーションのフラグ
	m_sMotionFrag.bATK = false;		// モーションのフラグ
	m_sMotionFrag.bJump = false;		// モーションのフラグ
	m_sMotionFrag.bKnockBack = false;	// モーションのフラグ
	m_sMotionFrag.bDead = false;		// モーションのフラグ
	m_sMotionFrag.bMove = false;		// モーションのフラグ

	// プライベート変数
	m_Oldstate = STATE_NONE;						// 前回の状態
	m_mMatcol = mylib_const::DEFAULT_COLOR;			// マテリアルの色
	m_posKnokBack = mylib_const::DEFAULT_VECTOR3;	// ノックバックの位置
	m_KnokBackMove = mylib_const::DEFAULT_VECTOR3;	// ノックバックの移動量
	m_nCntState = 0;								// 状態遷移カウンター
	m_nMyPlayerIdx = 0;								// プレイヤーインデックス番号
	m_pShadow = NULL;								// 影の情報
	m_pTargetP = NULL;								// 目標の地点
	WeaponHandle = 0;	// エフェクトの武器ハンドル
}

//==========================================================================
// デストラクタ
//==========================================================================
CPlayer::~CPlayer()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CPlayer *CPlayer::Create(int nIdx)
{
	// 生成用のオブジェクト
	CPlayer *pPlayer = NULL;

	if (pPlayer == NULL)
	{// NULLだったら

		// メモリの確保
		pPlayer = DEBUG_NEW CPlayer;

		if (pPlayer != NULL)
		{// メモリの確保が出来ていたら

			// プレイヤーインデックス番号
			pPlayer->m_nMyPlayerIdx = nIdx;

			// 初期化処理
			pPlayer->Init();
		}

		return pPlayer;
	}

	return NULL;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CPlayer::Init(void)
{
	// 種類の設定
	SetType(TYPE_PLAYER);

	m_state = STATE_NONE;	// 状態
	m_nCntState = 0;		// 状態遷移カウンター
	m_bLandOld = true;		// 前回の着地状態

	// キャラ作成
	HRESULT hr = SetCharacter(CHARAFILE);
	if (FAILED(hr))
	{// 失敗していたら
		return E_FAIL;
	}

	// 位置取得
	MyLib::Vector3 pos = GetPosition();

	// 影の生成
	//m_pShadow = CShadow::Create(pos, 50.0f);
	m_pObjX = CObjectX::Create("data\\MODEL\\aaaa.x");

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CPlayer::Uninit(void)
{

	// 影を消す
	if (m_pShadow != NULL)
	{
		//m_pShadow->Uninit();
		m_pShadow = NULL;
	}

	// 終了処理
	CObjectChara::Uninit();

	// モード別終了処理
	UninitByMode();
}

//==========================================================================
// モード別終了処理
//==========================================================================
void  CPlayer::UninitByMode(void)
{
	CScene *pScene = CManager::GetInstance()->GetScene();
	if (pScene != NULL)
	{
		// プレイヤーをNULL
		CManager::GetInstance()->GetScene()->UninitPlayer(m_nMyPlayerIdx);
	}
}

//==========================================================================
// 終了処理
//==========================================================================
void CPlayer::Kill(void)
{

	my_particle::Create(GetPosition(), my_particle::TYPE_ENEMY_FADE);

	// 影を消す
	if (m_pShadow != NULL)
	{
		m_pShadow->Uninit();
		m_pShadow = NULL;
	}
}

//==========================================================================
// 更新処理
//==========================================================================
void CPlayer::Update(void)
{
	if (IsDeath() == true)
	{
		return;
	}

	// キーボード情報取得
	CInputKeyboard* pInputKeyboard = CManager::GetInstance()->GetInputKeyboard();
	if (pInputKeyboard->GetTrigger(DIK_F5) == true)
	{// F5でリセット
		SetPosition(MyLib::Vector3(0.0f, 0.0f, -1000.0f));
		SetMove(MyLib::Vector3(0.0f, 0.0f, 0.0f));
	}

	// エディット中は抜ける
	if (CGame::GetElevation()->IsEdit())
	{
		return;
	}

	// エディット中は抜ける
	if (CGame::GetEditType() != CGame::EDITTYPE_OFF)
	{
		return;
	}

	// 過去の位置保存
	SetOldPosition(GetPosition());

	// 親の更新処理
	CObjectChara::Update();

	// 操作
	Controll();

	// モーションの設定処理
	MotionSet();

	// 状態更新
	UpdateState();

	// 位置取得
	MyLib::Vector3 pos = GetPosition();
	MyLib::Vector3 posCenter = GetCenterPosition();

	// 移動量取得
	MyLib::Vector3 move = GetMove();

	// 向き取得
	MyLib::Vector3 rot = GetRotation();

	// カメラの情報取得
	CCamera* pCamera = CManager::GetInstance()->GetCamera();
	pCamera->SetTargetPosition(pos);
	pCamera->SetTargetRotation(rot);

	// 影の位置更新
	if (m_pShadow != NULL)
	{
		m_pShadow->SetPosition(MyLib::Vector3(pos.x, m_pShadow->GetPosition().y, pos.z));
	}



	int nCntEffect = 0;
	int nNumEffect = GetEffectParentNum();
	for (int i = 0; i < mylib_const::MAX_OBJ; i++)
	{
		CEffect3D* pEffect = GetEffectParent(i);
		if (pEffect == NULL)
		{// NULLだったら
			continue;
		}

		// エフェクトの位置更新
		pEffect->UpdatePosition(GetRotation());
		nCntEffect++;
		if (nNumEffect <= nCntEffect)
		{
			break;
		}
	}

	// 位置の制限
	LimitPos();

#if 0
	// デバッグ表示
	CManager::GetInstance()->GetDebugProc()->Print(
		"------------------[プレイヤーの操作]------------------\n"
		"位置：【X：%f, Y：%f, Z：%f】【X：%f, Y：%f, Z：%f】 【W / A / S / D】\n"
		"向き：【X：%f, Y：%f, Z：%f】 【Z / C】\n"
		"移動量：【X：%f, Y：%f, Z：%f】\n"
		"体力：【%d】\n", pos.x, pos.y, pos.z, posCenter.x, posCenter.y, posCenter.z, rot.x, rot.y, rot.y, move.x, move.y, move.z, GetLife());
#endif

}

//==========================================================================
// 操作処理
//==========================================================================
void CPlayer::Controll(void)
{

	// キーボード情報取得
	CInputKeyboard *pInputKeyboard = CManager::GetInstance()->GetInputKeyboard();

	// ゲームパッド情報取得
	CInputGamepad *pInputGamepad = CManager::GetInstance()->GetInputGamepad();

	// カメラの情報取得
	CCamera *pCamera = CManager::GetInstance()->GetCamera();

	// カメラの向き取得
	MyLib::Vector3 Camerarot = pCamera->GetRotation();

	// 位置取得
	MyLib::Vector3 pos = GetPosition();
	MyLib::Vector3 newPosition = GetPosition();
	MyLib::Vector3 sakiPos = GetPosition();

	// 移動量取得
	MyLib::Vector3 move = GetMove();

	// 向き取得
	MyLib::Vector3 rot = GetRotation();

	// 目標の向き取得
	float fRotDest = GetRotDest();

	// 現在の種類取得
	CMotion* pMotion = GetMotion();
	int nMotionType = pMotion->GetType();

	// 移動量取得
	float fMove = GetVelocity();

	// 経過時間取得
	float fCurrentTime = CManager::GetInstance()->GetDeltaTime();
	

	if (CGame::GetGameManager()->IsControll())
	{// 行動できるとき

		if (pMotion->IsGetMove(nMotionType) == 1 &&
			m_state != STATE_DMG &&
			m_state != STATE_KNOCKBACK &&
			m_state != STATE_DEAD &&
			m_state != STATE_FADEOUT)
		{// 移動可能モーションの時

			if (pInputKeyboard->GetPress(DIK_A) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).x < 0)
			{//←キーが押された,左移動

				// 移動中にする
				m_sMotionFrag.bMove = true;

				if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
				{//A+W,左上移動

					move.x += sinf(-D3DX_PI * 0.25f + Camerarot.y) * fMove;
					move.z += cosf(-D3DX_PI * 0.25f + Camerarot.y) * fMove;
					fRotDest = D3DX_PI * 0.75f + Camerarot.y;
				}
				else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
				{//A+S,左下移動

					move.x += sinf(-D3DX_PI * 0.75f + Camerarot.y) * fMove;
					move.z += cosf(-D3DX_PI * 0.75f + Camerarot.y) * fMove;
					fRotDest = D3DX_PI * 0.25f + Camerarot.y;
				}
				else
				{//A,左移動

					move.x += sinf(-D3DX_PI * 0.5f + Camerarot.y) * fMove;
					move.z += cosf(-D3DX_PI * 0.5f + Camerarot.y) * fMove;
					fRotDest = D3DX_PI * 0.5f + Camerarot.y;
				}
			}
			else if (pInputKeyboard->GetPress(DIK_D) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).x > 0)
			{//Dキーが押された,右移動

				// 移動中にする
				m_sMotionFrag.bMove = true;

				if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
				{//D+W,右上移動

					move.x += sinf(D3DX_PI * 0.25f + Camerarot.y) * fMove;
					move.z += cosf(D3DX_PI * 0.25f + Camerarot.y) * fMove;
					fRotDest = -D3DX_PI * 0.75f + Camerarot.y;
				}
				else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
				{//D+S,右下移動

					move.x += sinf(D3DX_PI * 0.75f + Camerarot.y) * fMove;
					move.z += cosf(D3DX_PI * 0.75f + Camerarot.y) * fMove;
					fRotDest = -D3DX_PI * 0.25f + Camerarot.y;
				}
				else
				{//D,右移動

					move.x += sinf(D3DX_PI * 0.5f + Camerarot.y) * fMove;
					move.z += cosf(D3DX_PI * 0.5f + Camerarot.y) * fMove;
					fRotDest = -D3DX_PI * 0.5f + Camerarot.y;
				}
			}
			else if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
			{//Wが押された、上移動

				// 移動中にする
				m_sMotionFrag.bMove = true;
				move.x += sinf(D3DX_PI * 0.0f + Camerarot.y) * fMove;
				move.z += cosf(D3DX_PI * 0.0f + Camerarot.y) * fMove;
				fRotDest = D3DX_PI * 1.0f + Camerarot.y;
			}
			else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
			{//Sが押された、下移動

				// 移動中にする
				m_sMotionFrag.bMove = true;
				move.x += sinf(D3DX_PI * 1.0f + Camerarot.y) * fMove;
				move.z += cosf(D3DX_PI * 1.0f + Camerarot.y) * fMove;
				fRotDest = D3DX_PI * 0.0f + Camerarot.y;
			}
			else
			{
				// 移動中かどうか
				m_sMotionFrag.bMove = false;
			}

		}
		else if (pMotion->IsGetMove(nMotionType) == 0 &&
			m_state != STATE_DEAD &&
			m_state != STATE_FADEOUT)
		{
			if (pInputKeyboard->GetPress(DIK_A) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).x < 0)
			{//←キーが押された,左移動

				if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
				{//A+W,左上移動
					fRotDest = D3DX_PI * 0.75f + Camerarot.y;
				}
				else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
				{//A+S,左下移動
					fRotDest = D3DX_PI * 0.25f + Camerarot.y;
				}
				else
				{//A,左移動
					fRotDest = D3DX_PI * 0.5f + Camerarot.y;
				}
			}
			else if (pInputKeyboard->GetPress(DIK_D) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).x > 0)
			{//Dキーが押された,右移動

				if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
				{//D+W,右上移動
					fRotDest = -D3DX_PI * 0.75f + Camerarot.y;
				}
				else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
				{//D+S,右下移動
					fRotDest = -D3DX_PI * 0.25f + Camerarot.y;
				}
				else
				{//D,右移動
					fRotDest = -D3DX_PI * 0.5f + Camerarot.y;
				}
			}
			else if (pInputKeyboard->GetPress(DIK_W) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y > 0)
			{//Wが押された、上移動
				fRotDest = D3DX_PI * 1.0f + Camerarot.y;
			}
			else if (pInputKeyboard->GetPress(DIK_S) == true || pInputGamepad->GetStickMoveL(m_nMyPlayerIdx).y < 0)
			{//Sが押された、下移動
				fRotDest = D3DX_PI * 0.0f + Camerarot.y;
			}
		}
	}

	// 移動量加算
	newPosition.x += move.x;
	newPosition.z += move.z;

	sakiPos.x = newPosition.x + sinf(D3DX_PI + rot.y) * GetRadius();
	sakiPos.z = newPosition.z + cosf(D3DX_PI + rot.y) * GetRadius();

	// 角度の正規化
	UtilFunc::Transformation::RotNormalize(fRotDest);
	SetRotDest(fRotDest);

	// 現在と目標の差分を求める
	float fRotDiff = fRotDest - rot.y;

	// 角度の正規化
	UtilFunc::Transformation::RotNormalize(fRotDiff);

	// 角度の補正をする
	rot.y += fRotDiff * 0.15f;
	UtilFunc::Transformation::RotNormalize(rot.y);

	// 向き設定
	SetRotation(rot);

	// 重力処理
	if (m_state != STATE_KNOCKBACK && m_state != STATE_DMG && m_state != STATE_DEAD && m_state != STATE_FADEOUT)
	{
		move.y -= mylib_const::GRAVITY;

		// 位置更新
		newPosition.y += move.y;
		sakiPos.y = newPosition.y;
	}

	//**********************************
	// 当たり判定
	//**********************************
	bool bLandStage = Collision(sakiPos, move);

	bool bMove = false;
	if (m_bLandOld == false && bLandStage == true)
	{// 前回は着地していなくて、今回は着地している場合

		bMove = false;
	}

	if (m_bLandOld == true && bLandStage == true)
	{// 前回も今回も着地している場合
		bMove = true;
	}

	if (m_bHitWall == false && 
		(bLandStage == false || bMove == true || m_bLandField == true || m_bJump == true || m_sMotionFrag.bKnockBack == true || m_sMotionFrag.bDead == true))
	{
		pos.x = newPosition.x;
		pos.z = newPosition.z;
		pos.y = sakiPos.y;
		Collision(pos, move);

		// 前回は乗ってたことにする
		m_bLandOld = true;
	}
	else
	{
		MyLib::Vector3 posOld = GetOldPosition();
		pos.x = posOld.x;
		pos.z = posOld.z;
		pos = posOld;
		move.x = 0.0f;
		pos.y -= mylib_const::GRAVITY * 7.0f;

		if (m_bJump == false)
		{
			m_bJump = true;
		}

		Collision(pos, move);
	}

	// 慣性補正
	if (m_state != STATE_KNOCKBACK && m_state != STATE_DMG && m_state != STATE_DEAD && m_state != STATE_FADEOUT)
	{
		move.x += (0.0f - move.x) * 0.25f;
		move.z += (0.0f - move.z) * 0.25f;
	}

	// 位置設定
	SetPosition(pos);

	// 移動量設定
	SetMove(move);

	if (pInputKeyboard->GetTrigger(DIK_RETURN) == true)
	{
		m_sMotionFrag.bATK = true;		// 攻撃判定OFF

		MyLib::Vector3 weponpos = pos;

		WeaponHandle = CMyEffekseer::GetInstance()->SetEffect(
			"data/Effekseer/debugline_green.efkefc",
			weponpos, rot, 0.0f, 40.0f);

		// デバッグ表示
		CManager::GetInstance()->GetDebugProc()->Print(
			"わああああああああああああああああああああああああああああああああああああああああああああ\n");
	}

	if (pInputKeyboard->GetTrigger(DIK_SPACE) == true)
	{
		MyLib::Vector3 weponpos = pos;
		weponpos.y += 150.0f;

		WeaponHandle = CMyEffekseer::GetInstance()->SetEffect(
			"data/Effekseer/MyLine.efkefc",
			weponpos, rot, 0.0f, 40.0f);
	}

	if (pInputKeyboard->GetRepeat(DIK_O, 4) == true)
	{
		MyLib::Vector3 weponpos = pos;
		weponpos.y += 150.0f;

		MyLib::Vector3 spawnpos = UtilFunc::Transformation::GetRandomPositionSphere(weponpos, 300.0f);

		CMyEffekseer::GetInstance()->SetEffect(
			"data/Effekseer/Laser01.efkefc",
			spawnpos, UtilFunc::Transformation::GetRandomVecSphere() * D3DX_PI, mylib_const::DEFAULT_VECTOR3, 10.0f);
	}

	static float fff = 1.0f;
	if (pInputKeyboard->GetTrigger(DIK_UP) == true)
	{
		fff += 0.1f;
		CManager::GetInstance()->GetSound()->SetFrequency(CSound::LABEL_BGM_GAME, fff);
	}
	if (pInputKeyboard->GetTrigger(DIK_DOWN) == true)
	{
		fff -= 0.1f;
		CManager::GetInstance()->GetSound()->SetFrequency(CSound::LABEL_BGM_GAME, fff);
	}

	if (CMyEffekseer::GetInstance()->IsDeath(WeaponHandle))
	{
		WeaponHandle = CMyEffekseer::GetInstance()->SetEffect(
			"data/Effekseer/debugline_green.efkefc",
			pos, rot, 0.0f, 40.0f);
	}

	//if (WeaponHandle != 0)
	{

		// 武器の位置
		MyLib::Vector3 weponpos = UtilFunc::Transformation::WorldMtxChangeToPosition(GetModel()[16]->GetWorldMtx());

		// 武器のマトリックス取得
		D3DXMATRIX weaponWorldMatrix = GetModel()[16]->GetWorldMtx();

		// 武器の方向ベクトル
		MyLib::Vector3 weaponDirection(weaponWorldMatrix._31, weaponWorldMatrix._32, weaponWorldMatrix._33);

		// 軌跡のマトリックス取得
		Effekseer::Matrix43 efcmtx;
		efcmtx = CMyEffekseer::GetInstance()->GetMatrix(WeaponHandle);

		// 4x3行列に向きを設定
		efcmtx.Value[2][0] = weaponDirection.x;
		efcmtx.Value[2][1] = weaponDirection.y;
		efcmtx.Value[2][2] = weaponDirection.z;

		//// オイラー角の計算
		//float pitch = atan2f(-weaponDirection.y, sqrtf(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
		//float yaw = atan2f(weaponDirection.x, weaponDirection.z);

		//// オイラー角からマトリックス生成
		//D3DXMATRIX rotationMatrix;
		//D3DXMatrixRotationYawPitchRoll(&rotationMatrix, yaw, pitch, 0.0f);

		//// 4x3行列に向きを設定
		//efcmtx.Value[2][0] = weaponDirection.x;
		//efcmtx.Value[2][1] = weaponDirection.y;
		//efcmtx.Value[2][2] = weaponDirection.z;

		CMyEffekseer::GetInstance()->SetMatrix(WeaponHandle, efcmtx);




		// 軌跡のマトリックス設定
		//CMyEffekseer::GetInstance()->SetMatrix(WeaponHandle, efcmtx);
		CMyEffekseer::GetInstance()->SetPosition(WeaponHandle, weponpos);

		// デバッグ表示
		CManager::GetInstance()->GetDebugProc()->Print(
			"武器！！！！！[%f][%f][%f]", weaponDirection.x, weaponDirection.y, weaponDirection.z);



		////CMyEffekseer::GetInstance()->SetMatrix(WeaponHandle, GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx());

		//CMyEffekseer::GetInstance()->SetRotation(WeaponHandle, UtilFunc::Transformation::WorldMtxChangeToRotation(GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx()).Invert());







		//MyLib::Vector3 weaponTip = {0.0f, 50.0f, 0.0f};
		//D3DXMATRIX mtxRot, mtxTrans, mtxScale, mtxRotOrigin;	// 計算用マトリックス宣言
		//D3DXMATRIX mtxnParent;			// 親のマトリックス
		//D3DXMATRIX m_mtxWorld;			// 親のマトリックス

		//bool bScale = false;

		//// 親マトリックスの初期化
		//D3DXMatrixIdentity(&mtxRotOrigin);
		//D3DXMatrixIdentity(&mtxnParent);

		//// ワールドマトリックスの初期化
		//D3DXMatrixIdentity(&m_mtxWorld);

		//// 位置を反映する
		//D3DXMatrixTranslation(&mtxTrans, weaponTip.x, weaponTip.y, weaponTip.z);
		//D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

		//// 親のマトリックスを渡す
		//mtxnParent = GetModel()[ATKInfo.nCollisionNum]->GetParent()->GetWorldMtx();

		//// 自分に親のワールドマトリックスを掛ける
		//D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxnParent);

		//weaponTip = UtilFunc::Transformation::WorldMtxChangeToPosition(m_mtxWorld);

		//weaponDirection = weaponTip - UtilFunc::Transformation::WorldMtxChangeToPosition(GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx());
		//D3DXVec3Normalize(&weaponDirection, &weaponDirection);

		//// 向きベクトルの成分を取得
		//float rotX = atan2(weaponDirection.y, sqrt(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
		//float rotY = atan2(weaponDirection.x, weaponDirection.z);
		//float rotZ = 0.0f;  // この成分は必要に応じて設定

		// 向きをエフェクトに設定
		//CMyEffekseer::GetInstance()->SetRotation(WeaponHandle, MyLib::Vector3(weaponDirection .x, weaponDirection .y, weaponDirection .z) * D3DX_PI + MyLib::Vector3(D3DX_PI, 0.0f, D3DX_PI));
		//CMyEffekseer::GetInstance()->SetTransform(WeaponHandle, weponpos, { rotX, rotY, rotZ });



		// 各成分に対して atan2 を適用して、オイラー角を取得
		/*float pitch = atan2(weaponDirection.y, sqrt(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
		float yaw = atan2(weaponDirection.x, weaponDirection.z);*/


		//// ラジアンに変換して Vector3 に設定
		//MyLib::Vector3 eulerRotation(pitch, yaw, 0.0f);
		//m_pObjX->SetRotation(eulerRotation);




		//// オイラー角の計算
		float pitch = atan2f(-weaponDirection.y, sqrtf(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
		float yaw = atan2f(-weaponDirection.x, -weaponDirection.z);





		// 各成分に対して atan2 を適用して、オイラー角を取得
		/*float pitch = atan2(-weaponDirection.y, sqrt(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
		float yaw = atan2(weaponDirection.x, weaponDirection.z);*/


		// オイラー角をセット
		m_pObjX->SetRotation({ pitch, yaw, 0.0f });


		// デバッグ表示
		CManager::GetInstance()->GetDebugProc()->Print(
			"\n向き！！！！！[%f][%f][%f]", pitch, yaw, 0.0f);

		//m_pObjX->SetRotation(weaponDirection * D3DX_PI);
		m_pObjX->SetPosition(weponpos);
	}
}

//==========================================================================
// モーションの設定
//==========================================================================
void CPlayer::MotionSet(void)
{
	// モーション取得
	CMotion* pMotion = GetMotion();
	if (pMotion == NULL)
	{
		return;
	}

	if (pMotion->IsFinish() == true)
	{// 終了していたら

		// 現在の種類取得
		int nType = pMotion->GetType();
		int nOldType = pMotion->GetOldType();

		if (m_sMotionFrag.bMove == true && m_sMotionFrag.bKnockBack == false && m_sMotionFrag.bDead == false && m_bJump == false &&
			m_sMotionFrag.bATK == false && m_sMotionFrag.bATK == false)
		{// 移動していたら

			m_sMotionFrag.bMove = false;	// 移動判定OFF

			// 移動モーション
			pMotion->Set(MOTION_WALK);
		}
		else if (m_sMotionFrag.bATK == true)
		{// 攻撃

			m_sMotionFrag.bATK = false;		// 攻撃判定OFF

			pMotion->Set(MOTION_ATK, true);
		}
		else
		{
			// ニュートラルモーション
			pMotion->Set(MOTION_DEF);
		}
	}
}

//==========================================================================
// 攻撃時処理
//==========================================================================
void CPlayer::AttackAction(CMotion::AttackInfo ATKInfo, int nCntATK)
{
	// モーション取得
	CMotion* pMotion = GetMotion();
	int nType = pMotion->GetType();

	switch (nType)
	{
	case MOTION_ATK:	// 雪玉を拾う
		CManager::GetInstance()->GetSound()->PlaySound(CSound::LABEL_SE_SNOWGET);
		break;

	case MOTION_WALK:
		CManager::GetInstance()->GetSound()->PlaySound(CSound::LABEL_SE_WALK);
		break;

	default:
		break;
	}
}

//==========================================================================
// 攻撃判定中処理
//==========================================================================
void CPlayer::AttackInDicision(CMotion::AttackInfo ATKInfo, int nCntATK)
{
	// モーション取得
	CMotion* pMotion = GetMotion();

	// 武器の位置
	MyLib::Vector3 weponpos = pMotion->GetAttackPosition(GetModel(), ATKInfo);

	CEffect3D* pEffect = NULL;

	switch (pMotion->GetType())
	{
	case MOTION_ATK:
#if 0
		if (WeaponHandle != 0)
		{


			// 武器のマトリックス取得
			D3DXMATRIX weaponWorldMatrix = GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx();

			// 武器の方向ベクトル
			MyLib::Vector3 weaponDirection(weaponWorldMatrix._31, weaponWorldMatrix._32, weaponWorldMatrix._33);

			// 軌跡のマトリックス取得
			Effekseer::Matrix43 efcmtx;
			efcmtx = CMyEffekseer::GetInstance()->GetMatrix(WeaponHandle);

			// 4x3行列に向きを設定
			efcmtx.Value[2][0] = weaponDirection.x;
			efcmtx.Value[2][1] = weaponDirection.y;
			efcmtx.Value[2][2] = weaponDirection.z;

			// 軌跡のマトリックス設定
			//CMyEffekseer::GetInstance()->SetMatrix(WeaponHandle, efcmtx);
			CMyEffekseer::GetInstance()->SetPosition(WeaponHandle, weponpos);

			// デバッグ表示
			CManager::GetInstance()->GetDebugProc()->Print(
				"武器！！！！！[%f][%f][%f]", weaponDirection.x, weaponDirection.y, weaponDirection.z);



			////CMyEffekseer::GetInstance()->SetMatrix(WeaponHandle, GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx());

			//CMyEffekseer::GetInstance()->SetRotation(WeaponHandle, UtilFunc::Transformation::WorldMtxChangeToRotation(GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx()).Invert());

			//m_pObjX->SetPosition(weponpos);
			//m_pObjX->SetRotation(UtilFunc::Transformation::WorldMtxChangeToRotation(GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx()));



			


			//MyLib::Vector3 weaponTip = {0.0f, 50.0f, 0.0f};
			//D3DXMATRIX mtxRot, mtxTrans, mtxScale, mtxRotOrigin;	// 計算用マトリックス宣言
			//D3DXMATRIX mtxnParent;			// 親のマトリックス
			//D3DXMATRIX m_mtxWorld;			// 親のマトリックス

			//bool bScale = false;

			//// 親マトリックスの初期化
			//D3DXMatrixIdentity(&mtxRotOrigin);
			//D3DXMatrixIdentity(&mtxnParent);

			//// ワールドマトリックスの初期化
			//D3DXMatrixIdentity(&m_mtxWorld);

			//// 位置を反映する
			//D3DXMatrixTranslation(&mtxTrans, weaponTip.x, weaponTip.y, weaponTip.z);
			//D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

			//// 親のマトリックスを渡す
			//mtxnParent = GetModel()[ATKInfo.nCollisionNum]->GetParent()->GetWorldMtx();

			//// 自分に親のワールドマトリックスを掛ける
			//D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxnParent);

			//weaponTip = UtilFunc::Transformation::WorldMtxChangeToPosition(m_mtxWorld);

			//weaponDirection = weaponTip - UtilFunc::Transformation::WorldMtxChangeToPosition(GetModel()[ATKInfo.nCollisionNum]->GetWorldMtx());
			//D3DXVec3Normalize(&weaponDirection, &weaponDirection);

			//// 向きベクトルの成分を取得
			//float rotX = atan2(weaponDirection.y, sqrt(weaponDirection.x * weaponDirection.x + weaponDirection.z * weaponDirection.z));
			//float rotY = atan2(weaponDirection.x, weaponDirection.z);
			//float rotZ = 0.0f;  // この成分は必要に応じて設定

			// 向きをエフェクトに設定
			CMyEffekseer::GetInstance()->SetRotation(WeaponHandle, (weaponDirection.Invert() + D3DX_PI) * D3DX_PI);
			//CMyEffekseer::GetInstance()->SetTransform(WeaponHandle, weponpos, { rotX, rotY, rotZ });
		}
#endif
		break;
	}

#if _DEBUG
	CEffect3D::Create(weponpos, MyLib::Vector3(0.0f, 0.0f, 0.0f), D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), ATKInfo.fRangeSize, 2, CEffect3D::MOVEEFFECT_NONE, CEffect3D::TYPE_NORMAL);
#endif

	// 敵のリスト取得
	CListManager<CEnemy> enemyList = CEnemy::GetListObj();
	CEnemy* pEnemy = nullptr;

	// リストループ
	while (enemyList.ListLoop(&pEnemy))
	{
		// 敵の位置取得
		MyLib::Vector3 TargetPos = pEnemy->GetPosition();

		// 判定サイズ取得
		float fTargetRadius = pEnemy->GetRadius();

		if (UtilFunc::Collision::SphereRange(weponpos, TargetPos, ATKInfo.fRangeSize, fTargetRadius))
		{// 球の判定

			if (pEnemy->Hit(ATKInfo.nDamage) == true)
			{// 当たってたら

			}
		}
	}
}

//==========================================================================
// 位置制限
//==========================================================================
void CPlayer::LimitPos(void)
{
	MyLib::Vector3 pos = GetPosition();

	float fLength = sqrtf(pos.x * pos.x + pos.z * pos.z);

	if (fLength > RADIUS_STAGE)
	{// 補正
		D3DXVec3Normalize(&pos, &pos);

		pos *= RADIUS_STAGE;

		SetPosition(pos);
	}
}

//==========================================================================
// 当たり判定
//==========================================================================
bool CPlayer::Collision(MyLib::Vector3 &pos, MyLib::Vector3 &move)
{
	// 向き取得
	MyLib::Vector3 rot = GetRotation();

	// 着地したかどうか
	bool bLand = false;
	float fHeight = 0.0f;
	m_bLandField = false;
	m_bHitWall = false;			// 壁の当たり判定

	// 高さ取得
	if (m_state != STATE_KNOCKBACK && m_state != STATE_DMG && m_state != STATE_DEAD && m_state != STATE_FADEOUT)
	{
		fHeight = CManager::GetInstance()->GetScene()->GetElevation()->GetHeight(pos, &bLand);
	}
	else
	{
		fHeight = pos.y;
	}

	if (fHeight > pos.y)
	{// 地面の方が自分より高かったら

		// 地面の高さに補正
		pos.y = fHeight;
		m_bLandField = true;

		if (bLand == true)
		{// 着地してたら

			// ジャンプ使用可能にする
			m_bJump = false;
			move.y = 0.0f;
			m_bLandOld = true;
		}
	}


	// Xファイルとの判定
	CStage *pStage = CGame::GetStage();
	if (pStage == NULL)
	{// NULLだったら
		return false;
	}

	bool bNowLand = false;

	// ステージに当たった判定
	m_bHitStage = false;
	for (int nCntStage = 0; nCntStage < pStage->GetNumAll(); nCntStage++)
	{
		// オブジェクト取得
		CObjectX *pObjX = pStage->GetObj(nCntStage);

		if (pObjX == NULL)
		{// NULLだったら
			continue;
		}

		// 高さ取得
		bool bLand = false;
		fHeight = pObjX->GetHeight(pos, bLand);

		if (bLand == true && fHeight > pos.y)
		{// 地面の方が自分より高かったら

		 // 地面の高さに補正
			if (pos.y + 50.0f <= fHeight)
			{// 自分より壁が高すぎる
				m_bHitWall = true;
			}
			else
			{
				pos.y = fHeight;
			}

			m_bHitStage = true;
			m_bLandField = false;

			if (bLand == true)
			{// 着地してたら

				if ((m_sMotionFrag.bKnockBack || m_bJump == true) && GetPosition().y >= fHeight)
				{
					m_bLandOld = true;
				}

				if (m_bJump == true)
				{// ジャンプ中だったら

					// モーション取得
					CMotion* pMotion = GetMotion();
					pMotion->ToggleFinish(true);
				}

				// ジャンプ使用可能にする
				m_bJump = false;
				move.y = 0.0f;
				bNowLand = true;
				m_sMotionFrag.bJump = false;
			}
		}
	}

	// エリア制限情報取得
	CListManager<CLimitArea> limitareaList = CLimitArea::GetListObj();
	CLimitArea* pLimitArea = nullptr;

	while (limitareaList.ListLoop(&pLimitArea))
	{
		CLimitArea::sLimitEreaInfo info = pLimitArea->GetLimitEreaInfo();

		// 大人の壁を適用
		if (pos.x + GetRadius() >= info.fMaxX) { pos.x = info.fMaxX - GetRadius(); }
		if (pos.x - GetRadius() <= info.fMinX) { pos.x = info.fMinX + GetRadius(); }
		if (pos.z + GetRadius() >= info.fMaxZ) { pos.z = info.fMaxZ - GetRadius(); }
		if (pos.z - GetRadius() <= info.fMinZ) { pos.z = info.fMinZ + GetRadius(); }
	}

	// 向き設定
	SetRotation(rot);

	return bNowLand;
}

//==========================================================================
// ヒット処理
//==========================================================================
bool CPlayer::Hit(const int nValue)
{
	// 体力取得
	int nLife = GetLife();

	if (m_state != STATE_DMG &&
		m_state != STATE_KNOCKBACK &&
		m_state != STATE_INVINCIBLE &&
		m_state != STATE_DEAD &&
		m_state != STATE_FADEOUT)
	{// ダメージ受付状態の時

		// 体力減らす
		nLife -= nValue;


		// ゲームパッド情報取得
		CInputGamepad *pInputGamepad = CManager::GetInstance()->GetInputGamepad();
		pInputGamepad->SetVibration(CInputGamepad::VIBRATION_STATE_DMG, 0);

		m_KnokBackMove.y += 18.0f;
		m_bHitStage = false;

		// 体力設定
		SetLife(nLife);

		if (nLife <= 0)
		{// 体力がなくなったら

			// 死状態
			m_state = STATE_DEAD;

			m_KnokBackMove.y = 8.0f;

			// 遷移カウンター設定
			m_nCntState = DEADTIME;

			// 体力設定
			SetLife(0);

			// ノックバック判定にする
			m_sMotionFrag.bKnockBack = true;

			// やられモーション
			//pMotion->Set(MOTION_KNOCKBACK);

			// ノックバックの位置更新
			MyLib::Vector3 pos = GetPosition();
			MyLib::Vector3 rot = GetRotation();
			m_posKnokBack = pos;

			// 衝撃波生成
			CImpactWave::Create
			(
				MyLib::Vector3(pos.x, pos.y + 80.0f, pos.z),	// 位置
				MyLib::Vector3(D3DX_PI * 0.5f, D3DX_PI + rot.y, D3DX_PI),				// 向き
				D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.3f),			// 色
				80.0f,										// 幅
				80.0f,										// 高さ
				0.0f,										// 中心からの間隔
				20,											// 寿命
				10.0f,										// 幅の移動量
				CImpactWave::TYPE_GIZAWHITE,				// テクスチャタイプ
				false										// 加算合成するか
			);

			CManager::GetInstance()->SetEnableHitStop(18);

			// 振動
			CManager::GetInstance()->GetCamera()->SetShake(21, 30.0f, 0.0f);

			// 死んだ
			return true;
		}

		// 過去の状態保存
		m_Oldstate = m_state;

		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);

		// ダメージ状態にする
		m_state = STATE_DMG;

		// 遷移カウンター設定
		m_nCntState = 0;

		// ノックバックの位置更新
		MyLib::Vector3 pos = GetPosition();
		MyLib::Vector3 rot = GetRotation();
		m_posKnokBack = pos;

		// ノックバック判定にする
		m_sMotionFrag.bKnockBack = true;

		// やられモーション
		///pMotion->Set(MOTION_KNOCKBACK);

		// 衝撃波生成
		CImpactWave::Create
		(
			MyLib::Vector3(pos.x, pos.y + 80.0f, pos.z),	// 位置
			MyLib::Vector3(D3DX_PI * 0.5f, D3DX_PI + rot.y, D3DX_PI),				// 向き
			D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.3f),			// 色
			80.0f,										// 幅
			80.0f,										// 高さ
			0.0f,										// 中心からの間隔
			20,											// 寿命
			10.0f,										// 幅の移動量
			CImpactWave::TYPE_GIZAWHITE,				// テクスチャタイプ
			false										// 加算合成するか
		);

		CManager::GetInstance()->SetEnableHitStop(12);

		// 振動
		CManager::GetInstance()->GetCamera()->SetShake(12, 25.0f, 0.0f);

		// サウンド再生
		CManager::GetInstance()->GetSound()->PlaySound(CSound::LABEL_SE_PLAYERDMG);
	}

	// 死んでない
	return false;
}

//==========================================================================
// 状態更新処理
//==========================================================================
void CPlayer::UpdateState(void)
{
	switch (m_state)
	{
	case STATE_NONE:
		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
		break;

	case STATE_INVINCIBLE:
		Invincible();
		break;

	case STATE_DMG:
		Damage();
		break;

	case STATE_DEAD:
		Dead();
		break;

	case STATE_FADEOUT:
		FadeOut();
		break;

	case STATE_KNOCKBACK:
		KnockBack();
		break;
	}
}

//==========================================================================
// 無敵
//==========================================================================
void CPlayer::Invincible(void)
{
	// 状態遷移カウンター減算
	m_nCntState--;

	if (m_nCntState % INVINCIBLE_INT == 0)
	{// 規定間隔
		
		// 色設定
		if (m_mMatcol.a == 1.0f)
		{
			m_mMatcol.a = 0.4f;
		}
		else
		{
			m_mMatcol.a = 1.0f;
		}
	}

	if (m_nCntState <= 0)
	{// 遷移カウンターが0になったら

		// なにもない状態にする
		m_state = STATE_NONE;
		m_nCntState = 0;

		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	}

}

//==========================================================================
// ダメージ
//==========================================================================
void CPlayer::Damage(void)
{
	// 位置取得
	MyLib::Vector3 pos = GetPosition();

	// 移動量取得
	MyLib::Vector3 move = GetMove();

	// 向き取得
	MyLib::Vector3 rot = GetRotation();

	// 状態遷移カウンター減算
	m_nCntState++;

	// 色設定
	m_mMatcol = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);

	// 位置更新
	pos.y = (-0.4f * (float)(m_nCntState * m_nCntState) + m_KnokBackMove.y * (float)m_nCntState) + m_posKnokBack.y;
	pos.x += move.x;
	pos.z += move.z;

	// 起伏との判定
	if ((CManager::GetInstance()->GetScene()->GetElevation()->IsHit(pos) || m_bHitStage) && m_nCntState >= 10)
	{// 地面と当たっていたら
		m_state = STATE_INVINCIBLE;
		m_nCntState = INVINCIBLE_TIME;
		m_KnokBackMove.y = 0.0f;	// 移動量ゼロ
		m_bLandOld = true;

		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

		// ノックバック判定消す
		m_sMotionFrag.bKnockBack = false;

		// モーション取得
		CMotion* pMotion = GetMotion();
		if (pMotion == NULL)
		{// モーションがNULLだったら
			return;
		}
		pMotion->ToggleFinish(true);


		// Xファイルとの判定
		CStage *pStage = CGame::GetStage();
		if (pStage == NULL)
		{// NULLだったら
			return;
		}

		// ステージに当たった判定
		for (int nCntStage = 0; nCntStage < pStage->GetNumAll(); nCntStage++)
		{
			// オブジェクト取得
			CObjectX *pObjX = pStage->GetObj(nCntStage);

			if (pObjX == NULL)
			{// NULLだったら
				continue;
			}

			// 高さ取得
			bool bLand = false;
			pos.y = pObjX->GetHeight(pos, bLand);
		}


	}
	else if (m_nCntState >= 30)
	{// 遷移カウンターが30になったら

		// ノックバック状態にする
		m_state = STATE_KNOCKBACK;
	}


	// 位置設定
	SetPosition(pos);

	// 移動量設定
	SetMove(move);

	// 向き設定
	SetRotation(rot);
}

//==========================================================================
// 死亡
//==========================================================================
void CPlayer::Dead(void)
{
	// 位置取得
	MyLib::Vector3 pos = GetPosition();

	// 移動量取得
	MyLib::Vector3 move = GetMove();

	// 位置更新
	if (m_nCntState > 0)
	{
		int nCnt = DEADTIME - m_nCntState;
		pos.y = (-0.1f * (float)(nCnt * nCnt) + m_KnokBackMove.y * (float)nCnt) + m_posKnokBack.y;
		pos.x += move.x;
	}

	// 状態遷移カウンター減算
	m_nCntState--;

	// 起伏との判定
	if ((CManager::GetInstance()->GetScene()->GetElevation()->IsHit(pos) || m_bHitStage) && m_nCntState >= 10)
	{// 地面と当たっていたら

		m_state = STATE_FADEOUT;	// フェードアウト
		m_nCntState = FADEOUTTIME;
		m_KnokBackMove.y = 0.0f;	// 移動量ゼロ
		m_bLandOld = true;
		move.x = 0.0f;

		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

		// ノックバック判定消す
		m_sMotionFrag.bKnockBack = false;
		m_sMotionFrag.bDead = true;
		//pMotion->ToggleFinish(true);

		// ぶっ倒れモーション
		//pMotion->Set(MOTION_DEAD);

		// Xファイルとの判定
		CStage *pStage = CGame::GetStage();
		if (pStage == NULL)
		{// NULLだったら
			return;
		}

		// ステージに当たった判定
		for (int nCntStage = 0; nCntStage < pStage->GetNumAll(); nCntStage++)
		{
			// オブジェクト取得
			CObjectX *pObjX = pStage->GetObj(nCntStage);

			if (pObjX == NULL)
			{// NULLだったら
				continue;
			}

			// 高さ取得
			bool bLand = false;
			pos.y = pObjX->GetHeight(pos, bLand);
		}
	}

	// 位置設定
	SetPosition(pos);

	// 移動量設定
	SetMove(move);
}

//==========================================================================
// フェードアウト
//==========================================================================
void CPlayer::FadeOut(void)
{

	// 状態遷移カウンター減算
	m_nCntState--;

	// 色設定
	m_mMatcol.a = (float)m_nCntState / (float)FADEOUTTIME;

	if (m_nCntState <= 0)
	{// 遷移カウンターが0になったら

		// 死亡処理
		Kill();

		// 終了処理
		Uninit();
		return;
	}
}

//==========================================================================
// ノックバック
//==========================================================================
void CPlayer::KnockBack(void)
{
	// 位置取得
	MyLib::Vector3 pos = GetPosition();

	// 移動量取得
	MyLib::Vector3 move = GetMove();

	// 向き取得
	MyLib::Vector3 rot = GetRotation();

	// 目標の向き取得
	float fRotDest = GetRotDest();

	// 移動量取得
	float fMove = GetVelocity();

	// 現在と目標の差分
	float fRotDiff = 0.0f;

	// 距離の判定
	bool bLen = false;


	// 状態遷移カウンター減算
	m_nCntState++;

	// 位置更新
	pos.y = (-0.4f * (float)(m_nCntState * m_nCntState) + m_KnokBackMove.y * (float)m_nCntState) + m_posKnokBack.y;
	pos.x += move.x;
	pos.z += move.z;

	// 起伏との判定
	if ((CManager::GetInstance()->GetScene()->GetElevation()->IsHit(pos) || m_bHitStage))
	{// 地面と当たっていたら
		m_state = STATE_INVINCIBLE;
		m_nCntState = INVINCIBLE_TIME;
		m_KnokBackMove.y = 0.0f;	// 移動量ゼロ
		m_bLandOld = true;

		// 色設定
		m_mMatcol = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
		
		// ノックバック判定消す
		m_sMotionFrag.bKnockBack = false;

		// モーション取得
		CMotion* pMotion = GetMotion();
		if (pMotion == NULL)
		{// モーションがNULLだったら
			return;
		}
		pMotion->ToggleFinish(true);

		// Xファイルとの判定
		CStage *pStage = CGame::GetStage();
		if (pStage == NULL)
		{// NULLだったら
			return;
		}

		// ステージに当たった判定
		for (int nCntStage = 0; nCntStage < pStage->GetNumAll(); nCntStage++)
		{
			// オブジェクト取得
			CObjectX *pObjX = pStage->GetObj(nCntStage);

			if (pObjX == NULL)
			{// NULLだったら
				continue;
			}

			// 高さ取得
			bool bLand = false;
			pos.y = pObjX->GetHeight(pos, bLand);
		}
	}


	// 位置設定
	SetPosition(pos);

	// 移動量設定
	SetMove(move);

	// 向き設定
	SetRotation(rot);

	// 目標の向き設定
	SetRotDest(fRotDest);
}

//==========================================================================
// 描画処理
//==========================================================================
void CPlayer::Draw(void)
{

	// 描画処理
	if (m_state == STATE_DMG)
	{
		CObjectChara::Draw(m_mMatcol);
	}
	else if (m_state == STATE_INVINCIBLE || m_state == STATE_FADEOUT)
	{
		CObjectChara::Draw(m_mMatcol.a);
	}
	else
	{
		CObjectChara::Draw();
	}
}

//==========================================================================
// 状態設定
//==========================================================================
void CPlayer::SetState(STATE state, int nCntState)
{
	m_state = state;
	m_nCntState = nCntState;
}

//==========================================================================
// 状態取得
//==========================================================================
CPlayer::STATE CPlayer::GetState(void)
{
	return m_state;
}

